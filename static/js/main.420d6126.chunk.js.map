{"version":3,"sources":["Button.js","User.js","App.js","registerServiceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","loadNewUser","className","User","id","src","user","picture","large","alt","name","first","toUpperCase","slice","last","email","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","person","_this2","axios","get","then","result","setState","data","results","catch","error","console","log","_this3","src_Button","src_User","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8PAYeA,MAVf,SAAgBC,GAEZ,OACIC,EAAAC,EAAAC,cAAA,UACIC,QAAS,kBAAMJ,EAAMK,eACrBC,UAAW,gBAFf,kBCYOC,MAff,SAAcP,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKK,GAAI,QACLP,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAKC,QAAQC,MAAOC,IAAK,kBACzCZ,EAAAC,EAAAC,cAAA,OAAKK,GAAI,QACJR,EAAMU,KAAKI,KAAKC,MAAM,GAAGC,cAAehB,EAAMU,KAAKI,KAAKC,MAAME,MAAM,GAAI,IACxEjB,EAAMU,KAAKI,KAAKI,KAAK,GAAGF,cAAehB,EAAMU,KAAKI,KAAKI,KAAKD,MAAM,IAEvEhB,EAAAC,EAAAC,cAAA,WACKH,EAAMU,KAAKS,SC4BbC,cAhCX,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMxB,KACD4B,MAAQ,CACTC,OAAQ,IAHGR,6EAON,IAAAS,EAAAN,KACTO,IAAMC,IAAI,6BACLC,KAAK,SAAAC,GAAM,OAAIJ,EAAKK,SAAS,CAACN,OAAQK,EAAOE,KAAKC,QAAQ,OAC1DC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,iDAIhCf,KAAKnB,+CAGA,IAAAqC,EAAAlB,KACL,OACEvB,EAAAC,EAAAC,cAAA,OAAKG,UAAW,aACdL,EAAAC,EAAAC,cAACwC,EAAD,CACItC,YAAa,kBAAMqC,EAAKrC,iBAEzBmB,KAAKI,MAAMC,OAAOf,MACnBb,EAAAC,EAAAC,cAACyC,EAAD,CACElC,KAAMc,KAAKI,MAAMC,iBA3BfgB,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTpB,KAAK,SAAAwB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/B,QACf0B,UAAUC,cAAcO,WAK1BtB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBH,MAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,KCzEjEwB,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,qBAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAAmB,OAAMH,qBAAN,sBAEPvB,GAiDV,SAAiCO,GAE/BoB,MAAMpB,GACHpB,KAAK,SAAAyC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQ5C,IAAI,gBAAgB6C,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAM7C,KAAK,SAAAwB,GACjCA,EAAasB,aAAa9C,KAAK,WAC7Be,OAAOC,SAAS+B,aAKpB5B,EAAgBC,KAGnBf,MAAM,WACLE,QAAQC,IACN,mEArEAwC,CAAwB5B,GAIxBC,UAAUC,cAAcuB,MAAM7C,KAAK,WACjCO,QAAQC,IACN,+GAMJW,EAAgBC,MCzCxB6B","file":"static/js/main.420d6126.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Button(props) {\n\n    return (\n        <button\n            onClick={() => props.loadNewUser()}\n            className={'btn btn-info'}\n        >Load New User</button>\n    );\n}\n\nexport default Button;\n","import React from 'react';\n\nfunction User(props) {\n    return (\n        <div id={'user'}>\n            <img src={props.user.picture.large} alt={'user portrait'}/>\n            <div id={'data'}>\n                {props.user.name.first[0].toUpperCase()}{props.user.name.first.slice(1)}{' '}\n                {props.user.name.last[0].toUpperCase()}{props.user.name.last.slice(1)}\n            </div>\n            <div>\n                {props.user.email}\n            </div>\n        </div>\n    );\n}\n\nexport default User;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Button from './Button';\nimport User from './User';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            person: {}\n        }\n    }\n\n    loadNewUser(){\n        axios.get('https://randomuser.me/api')\n            .then(result => this.setState({person: result.data.results[0]}))\n            .catch(error => console.log(error))\n    }\n\n    componentDidMount(){\n        this.loadNewUser();\n    }\n\n    render() {\n        return (\n          <div className={'container'}>\n            <Button\n                loadNewUser={() => this.loadNewUser()}\n            />\n              {this.state.person.name &&\n              <User\n                user={this.state.person}\n              />}\n          </div>\n        );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}